<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Process</title><link href="http://changy-.github.io/" rel="alternate"></link><link href="http://changy-.github.io/feeds/changy.atom.xml" rel="self"></link><id>http://changy-.github.io/</id><updated>2015-11-07T18:27:00-05:00</updated><entry><title>Ubuntu 14.04 编译wireshark source</title><link href="http://changy-.github.io/articles/ubuntu-1404-bian-yi-wireshark-source.html" rel="alternate"></link><updated>2015-11-07T18:27:00-05:00</updated><author><name>Changy</name></author><id>tag:changy-.github.io,2015-11-07:articles/ubuntu-1404-bian-yi-wireshark-source.html</id><summary type="html">&lt;h1&gt;Ubuntu 14.04 编译wireshark source&lt;/h1&gt;
&lt;hr /&gt;
&lt;p&gt;由于通过&lt;code&gt;apt-get install wireshark&lt;/code&gt;安装的wireshark版本比较旧，不支持BLE协议。所以，得下载源代码进行编译。&lt;/p&gt;
&lt;p&gt;1.下载wireshark的源代码
2.安装必要的依赖库&lt;code&gt;sudo apt-get build-dep wireshark&lt;/code&gt;
3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd wireshark
./configure
make -j8
make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;然而，大部分情况下，这样是会有错误的。尤其是在&lt;code&gt;./configure&lt;/code&gt;后，会报缺少一些库，这个时候可以根据缺少的库，一个个的安装。&lt;/p&gt;
&lt;p&gt;我的情况下是缺少qt相关的库，google后，还是不能解决：qt is not found 或者 can't find uci.
可以参考：&lt;a href="http://stackoverflow.com/questions/25965807/qt-is-not-available-error-while-compiling-a-wireshark-1-12"&gt;qt is not found&lt;/a&gt;，&lt;a href="https://ask.wireshark.org/questions/28105/qt-not-available-error"&gt;Qt not available error?&lt;/a&gt;
我有尝试&lt;code&gt;apt-get install qt5-default&lt;/code&gt;和&lt;code&gt;apt-get install qt4-default&lt;/code&gt;，最后依然报错。&lt;/p&gt;
&lt;p&gt;最终，看到了这个&lt;a href="https://community.gns3.com/community/forum/blog/2015/01/21/how-to-build-wireshark-1123-from-scratch-in-ubuntu"&gt;使用GTK安装wireshark&lt;/a&gt;，安装qt会有各种错误，使用这个后，很顺利的安装成功了。&lt;/p&gt;
&lt;p&gt;对于报qt错的同学，可以参考下这个&lt;a href="https://www.howtoinstall.co/en/ubuntu/utopic/universe/wireshark-qt/"&gt;这个&lt;/a&gt;&lt;/p&gt;</summary><category term="wireshark"></category></entry><entry><title>Programming language 2</title><link href="http://changy-.github.io/articles/programming-language-2.html" rel="alternate"></link><updated>2015-11-06T10:32:00-05:00</updated><author><name>Changy</name></author><id>tag:changy-.github.io,2015-11-06:articles/programming-language-2.html</id><summary type="html">&lt;h1&gt;&lt;strong&gt;Programming Language 2&lt;/strong&gt;&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;前言&lt;/h2&gt;
&lt;p&gt;刚刚结束这门课的期中考试，老师讲课内容很深，考试也很难，并且提高了自己对编程语言的理解，有必要做一个记录。&lt;/p&gt;
&lt;p&gt;这一部分对应的是Algol68和Python里的一些特性。&lt;/p&gt;
&lt;h2&gt;Referfence &amp;amp; Value&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x=x+2&lt;/code&gt;,这个赋值中x是int型，按照我们的理解是把x的值加上2再赋值给x。然而，这只是现代的编程语言高度抽象化后的结果。
&lt;code&gt;int x&lt;/code&gt;，表示我们申明了一个整型，name是x。在Algol68中，这表示的是x是指向int的引用。
&lt;code&gt;x=x+2&lt;/code&gt;，右边的x会deref，从引用变为int，然后相加，最后x再指向这个int值。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://github.com/Changy-/Changy-.github.io/blob/master/images/003.png?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;最后，y=2，x=5。
在这个图中，&lt;code&gt;r:=3&lt;/code&gt;,3是int值，而左边的r是引用，指向的是x，也可以理解成 ref ref int类型。最后一个问题，z会不断deref，直到找到int值。&lt;/p&gt;
&lt;h2&gt;Array&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;维度：
在数组中，类型变得不重要了，反而维度很重要。相同的维度，他们就是相同的。
[1:100,1:n] real 与 [1:10,7:11] int  是相同的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;动态数组：
&lt;code&gt;Flex [1:0] int obj&lt;/code&gt;数组长度为0，动态的，当赋值的时候才确定长度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mode bin_tree = struct(int data, REFbin_tree l_child, r_child)&lt;/code&gt;支持递归定义。&lt;/p&gt;
&lt;h2&gt;Union&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mode combine = UNION(int,bool)&lt;/code&gt;
&lt;code&gt;combine x&lt;/code&gt;，这里，x可以是int也可以时bool型&lt;/p&gt;
&lt;h2&gt;Expression&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="https://github.com/Changy-/Changy-.github.io/blob/master/images/004.png?raw=true" /&gt;&lt;/p&gt;
&lt;h2&gt;Iterator&lt;/h2&gt;
&lt;p&gt;迭代器是个好东西！！！！！
参考&lt;a href="https://en.wikipedia.org/wiki/Iterator"&gt;这里&lt;/a&gt;。
&lt;img alt="" src="https://github.com/Changy-/Changy-.github.io/blob/master/images/005.png?raw=true" /&gt;&lt;/p&gt;</summary><category term="class"></category></entry><entry><title>Porgramming Language 1</title><link href="http://changy-.github.io/articles/porgramming-language-1.html" rel="alternate"></link><updated>2015-11-04T15:46:00-05:00</updated><author><name>Changy</name></author><id>tag:changy-.github.io,2015-11-04:articles/porgramming-language-1.html</id><summary type="html">&lt;h1&gt;&lt;strong&gt;Porgramming Language 1&lt;/strong&gt;&lt;/h1&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;刚刚结束这门课的期中考试，老师讲课内容很深，考试也很难，并且提高了自己对编程语言的理解，有必要做一个记录。&lt;/p&gt;
&lt;p&gt;这一部分对应的是Fortran和Algol60。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Fortran&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;一些重要的概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Functions(not subroutines)&lt;/li&gt;
&lt;li&gt;Common blocks&lt;/li&gt;
&lt;li&gt;Definete loops&lt;/li&gt;
&lt;li&gt;Operateor overloading(not user-defined)&lt;/li&gt;
&lt;li&gt;on intergers and reals&lt;/li&gt;
&lt;li&gt;Type coersion&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Fortran里，二维数组是按列存储的。这点比较反人类。并且所有的数据都是静态分配的（后面会提到动态分配）。
最重要的是理解GOTO这个关键字的意义和对后来者的影响。
Programming 作业就是用Fortran实现一个BNF（可以理解成写正则表达式）。&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Algol60&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;这是First design-by-commitee language。&lt;/p&gt;
&lt;p&gt;一些重要的概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;IF was an &lt;strong&gt;expression&lt;/strong&gt; not a statement&lt;/li&gt;
&lt;li&gt;Block structure and &lt;strong&gt;scoping&lt;/strong&gt; rules&lt;/li&gt;
&lt;li&gt;Structured, nestablecontrol statements &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic bounds on arrays&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Call by value&lt;/strong&gt; and &lt;strong&gt;call by name&lt;/strong&gt; for procedure parameters&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic variable lifetime&lt;/strong&gt;*&lt;/li&gt;
&lt;li&gt;BNF –Backus-Naur Form&lt;/li&gt;
&lt;li&gt;Recursion (and thus, &lt;strong&gt;stack-based computation model&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;加粗部分是比较重要的概念，像Java，Python都有用到这些方法。&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;statement vs expression&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="https://github.com/Changy-/Changy-.github.io/blob/master/images/001.PNG?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;如果有疑问，可以参考&lt;a href="http://stackoverflow.com/questions/4728073/what-is-the-difference-between-an-expression-and-a-statement-in-python"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;variable&lt;/strong&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;Address&lt;/strong&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Variables may not live at the same address&lt;/li&gt;
&lt;li&gt;Multiple variables may share an address: aliasing&lt;/li&gt;
&lt;li&gt;This can change as the program changes&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    1   #include &amp;lt;stdio.h&amp;gt;
    2       intmain() {
    3       char *x = &amp;quot;This is an example&amp;quot;;
    4       char *y = x;
    5       printf(&amp;quot;%p\n&amp;quot;, y);
    6       y = NULL;
    7       printf(&amp;quot;%p\n&amp;quot;, y);
    8   }

        0x1053e3f7a
        0x0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;熟悉c的同学这段代码应该没问题的。&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Binding&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;绑定，在这里指的是变量和内存地址的绑定，主要分为3个阶段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;compile time: 一些全局变量或者const等&lt;/li&gt;
&lt;li&gt;load time：静态变量。 我自己理解这里花了很长的时间，不太懂load time是哪一段时间，看了下wiki：https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase) 才明白的，简而言之，load time就是运行程序时，程序在内存中，这个时候，loader会扫描程序，分配地址，一切完成后，程序才运行，就到了run time。&lt;/li&gt;
&lt;li&gt;run time：这里比较复杂，有些语言是stack allocation的，在函数中的变量就会不断的绑定和销毁。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;总结一下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Static binding: happens before runtime&lt;/p&gt;
&lt;p&gt;Dynamic binding: happens during runtime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;&lt;strong&gt;Scope &amp;amp; Lifetime&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;这2个是特别容易混淆的概念。Scope是指变量有意义的范围，Lifetime就是生命周期。乍一看起来，2者是一样的，其实对不同的编程语言，有很大的区别。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scope&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    float pi = 3.1415927;

    float calc_area(float r) {
    return pi * r * r;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;很显然，在&lt;code&gt;calc_area()&lt;/code&gt;函数中可以知道pi的值，也就是说pi的scope包括了&lt;code&gt;calc_area()&lt;/code&gt;函数。这是静态的。&lt;/p&gt;
&lt;p&gt;动态：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    func f1() {
        x = 10;
        f2();
    }
    func f2() {
        print(x);
        print(z);
    }
    x = 1;
    z = 1;
    f1();
    f2();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出结果是10,1,1,1
dynamic scoping 是上下文相关的。&lt;/p&gt;
&lt;p&gt;流程图：
&lt;img alt="流程图" src="https://github.com/Changy-/Changy-.github.io/blob/master/images/002.PNG?raw=true" /&gt;&lt;/p&gt;
&lt;p&gt;当需要x变量时，函数会不断往外寻找，这就是动态的原因。&lt;/p&gt;
&lt;p&gt;2.lifetime&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    char *copy(char *str) {
        inti, l;
        l = strlen(str);
        char *ret = (char *)malloc(l);
        for (i=0; i&amp;lt;= l; i++) {
            ret[i] = str[i];
        }
        return ret;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;对于这段代码，copy()函数结束后，变量ret就销毁了吗？
并不是这样的。ret是通过malloc得来的，此时，ret并不是存在stack中，而是存在heap中。（不太懂得同学可以参考&lt;a href="http://gribblelab.org/CBootcamp/7_Memory_Stack_vs_Heap.html"&gt;这里&lt;/a&gt;或者百度，上面有很多解释。）这样，只有programmer调用free时，ret变量才会被内存销毁。
所以，ret的lifetime比scope要大。&lt;/p&gt;
&lt;p&gt;总结一下就是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Static allocation: statically bound to a memory address(整个run time)&lt;/p&gt;
&lt;p&gt;Stack allocation: local variable w/ automatic allocation&lt;/p&gt;
&lt;p&gt;Heap allocation: dynamically allocated at runtime (via mallocor similar)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Parameter passing&lt;/strong&gt;
这也是很重要的概念。
熟悉C语言的同学都知道，C是值传递的(pass-by-value)，调用swap(int a,int b)并不难交换2个数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;pass-by-name: 只有在需要的时候才赋值。
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    x=[1,2,3,4,5,6,7,8,9,10]
    i=10
    int sum(ix,l.u,item){
        s=0
        for(ix=l; ix &amp;lt;= u; ix++){
            s=s+item
        }
    }
    sum(i,1,10,x[i])
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;结果是55，而不是100。
因为x[i]并不是在传参的时候被实例化了，而是在&lt;code&gt;s=s+item&lt;/code&gt;中才被赋值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pass-by-value:
C语言使用的就是这个，没什么好说的。不过，在java和Python中，基本类型也是使用的这个，而高级类型（如：对象）使用的是pass-by-reference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pass-by-reference: 相当于有一个指针指向了变量，在函数内部，形参改变了，实参也改变了。因为这2者是指向同一个地址的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pass-by-result:和pass-by-reference差不多，也是和实参指向同一个地址，但是，区别在于，pass-by-result的形参不能读取，只能输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pass-by-value-resule:可以理解成copy in &amp;amp; copy out，效果可pass-by-reference一样。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;最后附上他们的优缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pass-by-name&lt;ul&gt;
&lt;li&gt;-Too unintuitive&lt;/li&gt;
&lt;li&gt;-Parameters evaluated each use –could get expensive in a loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pass-by-reference&lt;ul&gt;
&lt;li&gt;+More efficient than copying&lt;/li&gt;
&lt;li&gt;-Aliasing leads to unexpected side-effects&lt;/li&gt;
&lt;li&gt;-How to handle an expression as an argument?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pass-by-value&lt;ul&gt;
&lt;li&gt;+Argument protected from changes in callee&lt;/li&gt;
&lt;li&gt;+No unintended side-effects&lt;/li&gt;
&lt;li&gt;-Execution time and space, especially for arrays, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pass-by-result&lt;ul&gt;
&lt;li&gt;+Manifest interface&lt;/li&gt;
&lt;li&gt;-fnfunc(a, b : int);  func(m, m);&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="class"></category></entry><entry><title>自定义Vim配置</title><link href="http://changy-.github.io/articles/zi-ding-yi-vimpei-zhi.html" rel="alternate"></link><updated>2015-09-07T22:32:00-04:00</updated><author><name>Changy</name></author><id>tag:changy-.github.io,2015-09-07:articles/zi-ding-yi-vimpei-zhi.html</id><summary type="html">&lt;p&gt;配置源码都在  &lt;code&gt;https://github.com/Changy-/vim&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;贴上&lt;a href="https://github.com/Changy-/vim/blob/master/.vimrc"&gt;.vimrc&lt;/a&gt;,根据你自身情况,可以直接再这里修改,每个参数的意义也比较清楚.&lt;/p&gt;
&lt;p&gt;如若需要修改主题,&lt;code&gt;color rainbow_neon&lt;/code&gt; 把rainbow_neon改成主题名就行了.我的源码的/colors目录下集成了很多主题,可以任意选择. 如需添加主题,将主题.vim文件copy至~/.vim/colors中,再更改.vimrc即可.
推荐一个主题站 &lt;code&gt;http://vimcolorschemetest.googlecode.com/svn/html/index-html.html&lt;/code&gt; 作为参考&lt;/p&gt;
&lt;p&gt;再者,在这里提醒一下,本人是再ubuntu14.04 gnome下使用该方法,由于我的terminal也有主题,故而会使得vim的主题颜色发生剧烈变化. Ps:我因此怀疑了好久自己的审美观.....  另外一种bug就是要设置为256色.
如果你也有同样的问题,可以参考&lt;a href="http://stackoverflow.com/questions/10778078/vim-colorscheme-executing-but-not-changing-colors"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;截图:&lt;/h2&gt;
&lt;p&gt;&lt;img alt="截图" src="https://github.com/Changy-/vim/blob/master/screenshot.png?raw=true" title="截图" /&gt;&lt;/p&gt;
&lt;p&gt;有任何问题,欢迎在评论区提出, 或者email我: changy.smali@gmail.com&lt;/p&gt;</summary><category term="Vim"></category></entry><entry><title>Just_Try</title><link href="http://changy-.github.io/articles/just_try.html" rel="alternate"></link><updated>2015-08-28T15:35:00-04:00</updated><author><name>changy</name></author><id>tag:changy-.github.io,2015-08-28:articles/just_try.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;The first Markdown.
&lt;/pre&gt;&lt;/div&gt;</summary><category term="other"></category></entry></feed>